{"version":3,"file":"callforth.modern.js","sources":["../src/callforth.js"],"sourcesContent":["\nexport const eventOn = (eventTarget, successEvent, errorEvent = \"error\") => {\n  let $resolve, $reject\n\n  const promise = new Promise((resolve, reject) => {\n    $resolve = resolve\n    $reject = reject\n  })\n\n  eventTarget.addEventListener(successEvent, $resolve)\n  eventTarget.addEventListener(errorEvent, $reject)\n\n  promise.finally(() => {\n    eventTarget.removeEventListener(successEvent, $resolve)\n    eventTarget.removeEventListener(errorEvent, $reject)\n  })\n\n  return promise\n}\n\nexport const timeout = milliseconds => {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  )\n}\n\nexport const polling = async (predicate, options = {}) => {\n  const { maxTries = 10, interval = 10 } = options\n\n  if (maxTries <= 0) {\n    // reject\n    throw undefined\n  } else if (predicate()) {\n    // resolve\n    return undefined\n  } else {\n    await timeout(interval)\n    await polling(predicate, { maxTries: maxTries-1, interval })\n  }\n}"],"names":["eventOn","eventTarget","successEvent","errorEvent","$resolve","$reject","promise","Promise","resolve","reject","addEventListener","finally","removeEventListener","timeout","milliseconds","setTimeout","polling","async","predicate","options","maxTries","interval","undefined"],"mappings":"AACaA,MAAAA,EAAU,CAACC,EAAaC,EAAcC,EAAa,WAC9D,IAAIC,EAAUC,EAEd,MAAMC,EAAU,IAAIC,QAAQ,CAACC,EAASC,KACpCL,EAAWI,EACXH,EAAUI,IAWZ,OARAR,EAAYS,iBAAiBR,EAAcE,GAC3CH,EAAYS,iBAAiBP,EAAYE,GAEzCC,EAAQK,QAAQ,KACdV,EAAYW,oBAAoBV,EAAcE,GAC9CH,EAAYW,oBAAoBT,EAAYE,KAGvCC,GAGIO,EAAUC,OACVP,QACTC,GAAWO,WAAWP,EAASM,IAItBE,EAAUC,MAAOC,EAAWC,EAAU,MACjD,MAAMC,SAAEA,EAAW,GAAbC,SAAiBA,EAAW,IAAOF,EAEzC,GAAIC,GAAY,EAEd,WAAME,EACGJ,YAIHL,EAAQQ,SACRL,EAAQE,EAAW,CAAEE,SAAUA,EAAS,EAAGC,SAAAA"}